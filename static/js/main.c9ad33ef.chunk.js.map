{"version":3,"sources":["App.styled.js","components/LeafletMap/LeafletMap.styled.js","components/LeafletMap/LeafletMap.jsx","api/index.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","MapStyled","styled","Map","myIcon","L","icon","iconUrl","iconSize","popupAnchor","LeafletMap","props","center","coords","zoom","TileLayer","attribution","url","undefined","articles","map","curr","index","Marker","position","lat","lon","key","Popup","href","title","articlesFetch","location","a","fetch","fetchData","json","geosearch","query","App","useState","setArticles","setCoords","useEffect","setTimeout","coordsFetch","navigator","geolocation","getCurrentPosition","coordsReceived","latitude","longitude","asyncWrapper","fetchedData","ReactDOM","render","document","getElementById"],"mappings":"0ZAEO,IAAMA,EAAcC,YAAH,K,0JCCjB,IAAMC,EAAYC,YAAOC,IAAPD,CAAH,KCGhBE,EAASC,IAAEC,KAAK,CACpBC,QAAS,oDACTC,SAAU,CAAC,GAAI,IACfC,YAAa,CAAC,GAAI,MAGPC,EAAa,SAACC,GACzB,OACE,kBAACV,EAAD,CAAWW,OAAQD,EAAME,OAAQC,KAAMH,EAAMG,MAE3C,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,4DAEcC,IAAnBP,EAAMQ,SACHR,EAAMQ,SAASC,KAAI,SAACC,EAAMC,GAAP,OACjB,kBAACC,EAAA,EAAD,CACEC,SAAU,CAACH,EAAKI,IAAKJ,EAAKK,KAC1BC,IAAK,SAAWL,EAChBhB,KAAMF,GAEN,kBAACwB,EAAA,EAAD,KACE,uBAAGC,KAAM,iCAAmCR,EAAKS,OAC9CT,EAAKS,YAKd,OClCGC,EAAa,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACrBhB,EADqB,6FACuEe,EADvE,qDAIV,2BAAbA,EAJuB,iCAKDE,MAAMjB,GALL,cAKnBkB,EALmB,gBAQfA,EAAUC,OARK,uBAOdC,EAPc,EAOvBC,MAASD,UAPc,kBAUlBA,GAVkB,4CAAH,sDC4CXE,EArCH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTrB,EADS,KACCsB,EADD,OAEYD,mBAAS,CAAC,WAAY,YAFlC,mBAET3B,EAFS,KAED6B,EAFC,OAGDF,mBAAS,IAAjB1B,EAHS,oBA6BhB,OAvBA6B,qBAAU,WACRC,YAAW,YACS,uCAAG,8BAAAX,EAAA,sDACbY,EAAc,WAClBC,UAAUC,YAAYC,mBAAmBC,IAErCA,EAAiB,SAACzB,GACtBkB,EAAU,CAAClB,EAASX,OAAOqC,SAAU1B,EAASX,OAAOsC,aAEvDN,IAPmB,2CAAH,qDASlBO,KACC,OACF,IAEHT,qBAAU,YACO,uCAAG,4BAAAV,EAAA,sEACUF,EAAclB,EAAO,GAAK,MAAQA,EAAO,IADnD,OACVwC,EADU,OAEhBZ,EAAYY,GAFI,2CAAH,qDAIflB,KACC,CAACtB,IAGF,oCACE,kBAACd,EAAD,MACA,kBAAC,EAAD,CAAYoB,SAAUA,EAAUN,OAAQA,EAAQC,KAAMA,MCjC5DwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c9ad33ef.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n","import styled from \"styled-components\";\nimport { Map } from \"react-leaflet\";\n\nexport const MapStyled = styled(Map)`\n  width: 100vw;\n  height: 100vh;\n`;\n","import React from \"react\";\nimport L from \"leaflet\";\nimport { TileLayer, Marker, Popup } from \"react-leaflet\";\n\nimport { MapStyled } from \"./LeafletMap.styled\";\n\nconst myIcon = L.icon({\n  iconUrl: \"https://image.flaticon.com/icons/svg/49/49360.svg\",\n  iconSize: [35, 35],\n  popupAnchor: [0, -20],\n});\n\nexport const LeafletMap = (props) => {\n  return (\n    <MapStyled center={props.coords} zoom={props.zoom}>\n      {/* MapStyled = Map component of react-leaflet */}\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {props.articles !== undefined\n        ? props.articles.map((curr, index) => (\n            <Marker\n              position={[curr.lat, curr.lon]}\n              key={\"coords\" + index}\n              icon={myIcon}\n            >\n              <Popup>\n                <a href={\"https://en.wikipedia.org/wiki/\" + curr.title}>\n                  {curr.title}\n                </a>\n              </Popup>\n            </Marker>\n          ))\n        : null}\n    </MapStyled>\n  );\n};\n","export const articlesFetch = async (location) => {\n  const url = `https://en.wikipedia.org/w/api.php?action=query&format=json&list=geosearch&gscoord=${location}&gsradius=10000&gslimit=10&gsnamespace=0&origin=*`;\n\n  // Not to fetch dummy location articles\n  if (location !== 15.925994 + \"%7C\" + -37.193399) {\n    const fetchData = await fetch(url);\n    const {\n      query: { geosearch },\n    } = await fetchData.json();\n    // console.log(geosearch);\n    return geosearch;\n  }\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { GlobalStyle } from \"./App.styled\";\n\nimport { LeafletMap } from \"./components/LeafletMap/LeafletMap\";\nimport { articlesFetch } from \"./api\";\n\nconst App = () => {\n  const [articles, setArticles] = useState([]);\n  const [coords, setCoords] = useState([15.925994, -37.193399]); // Visually Neutral/Sea\n  const [zoom] = useState(15);\n\n  // When run asks for current position and callsback a function giving it the value as a parameter.\n  useEffect(() => {\n    setTimeout(() => {\n      const asyncWrapper = async () => {\n        const coordsFetch = () => {\n          navigator.geolocation.getCurrentPosition(coordsReceived);\n        };\n        const coordsReceived = (position) => {\n          setCoords([position.coords.latitude, position.coords.longitude]);\n        };\n        coordsFetch();\n      };\n      asyncWrapper();\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchedData = await articlesFetch(coords[0] + \"%7C\" + coords[1]);\n      setArticles(fetchedData);\n    };\n    fetchData();\n  }, [coords]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <LeafletMap articles={articles} coords={coords} zoom={zoom} />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}