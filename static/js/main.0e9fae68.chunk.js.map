{"version":3,"sources":["App.styled.js","components/GpsIcon/GpsIcon.styled.js","components/GpsIcon/GpsIcon.jsx","components/Ripples/Ripples.styled.js","components/Ripples/Ripples.jsx","api/index.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","section","Icon","button","GpsIcon","props","testingOutput","position","console","log","coords","latitude","longitude","heading","setLat","setLon","onClick","navigator","geolocation","getCurrentPosition","MapStyled","Map","myIcon","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","Ripples","center","Number","lat","lon","zoom","TileLayer","attribution","url","undefined","articles","map","curr","index","Marker","key","Popup","href","title","apiTesting","location","a","fetch","fetchData","json","geosearch","query","App","useState","setArticles","useEffect","fetchedData","ReactDOM","render","document","getElementById"],"mappings":"+iBAGO,IAAMA,EAAcC,YAAH,KAOXC,EAAUC,IAAOC,QAAV,K,mLCPb,IAAMC,EAAOF,IAAOG,OAAV,KC6BFC,EA1BC,SAACC,GAEf,IAMMC,EAAgB,SAACC,GACrBC,QAAQC,IAAR,qBACgBF,EAASG,OAAOC,SADhC,yBACyDJ,EAASG,OAAOE,UADzE,sBACgGL,EAASG,OAAOG,UAEhHR,EAAMS,OACJP,EAASG,OAAOC,UAClBN,EAAMU,OACJR,EAASG,OAAOE,YAIpB,OACE,oCACE,kBAACV,EAAD,CAAMc,QAnBM,WACdC,UAAUC,YAAYC,mBAAmBb,KAkBvC,S,yKCxBC,IAAMc,EAAYpB,YAAOqB,IAAPrB,CAAH,KCGhBsB,EAASC,IAAEC,KAAK,CACpBC,QAAS,oDACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,KAAM,IACnBC,YAAa,CAAC,GAAI,MAiCLC,EA9BC,SAACxB,GACf,OACE,kBAACe,EAAD,CACEU,OAAQ,CAACC,OAAO1B,EAAM2B,KAAMD,OAAO1B,EAAM4B,MACzCC,KAAM7B,EAAM6B,MAGZ,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,4DAEcC,IAAnBjC,EAAMkC,SACHlC,EAAMkC,SAASC,KAAI,SAACC,EAAMC,GAAP,OACjB,kBAACC,EAAA,EAAD,CACEpC,SAAU,CAACkC,EAAKT,IAAKS,EAAKR,KAC1BW,IAAK,SAAWF,EAChBlB,KAAMF,GAEN,kBAACuB,EAAA,EAAD,KACE,uBAAGC,KAAM,iCAAmCL,EAAKM,OAC9CN,EAAKM,YAKd,OCnCGC,EAAU,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDAClBb,EADkB,6FAC0EY,EAD1E,qDASP,QAAbA,EAToB,iCAUEE,MAAMd,GAVR,cAUhBe,EAVgB,gBAaZA,EAAUC,OAbE,uBAYXC,EAZW,EAYpBC,MAASD,UAEX9C,QAAQC,IAAI6C,GAdU,kBAefA,GAfe,4CAAH,sDCmCRE,EAzBH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTlB,EADS,KACCmB,EADD,OAEMD,mBAAS,IAFf,mBAETzB,EAFS,KAEJlB,EAFI,OAGM2C,mBAAS,IAHf,mBAGTxB,EAHS,KAGJlB,EAHI,OAIQ0C,mBAAS,IAJjB,mBAITvB,EAJS,UAchB,OARAyB,qBAAU,YACO,uCAAG,4BAAAT,EAAA,sEACUF,EAAWhB,EAAM,MAAQC,GADnC,OACV2B,EADU,OAEhBF,EAAYE,GAFI,2CAAH,qDAIfR,KACC,CAACpB,GAAOC,IAGT,oCACE,kBAACpC,EAAD,MACA,kBAACE,EAAD,KACE,kBAAC,EAAD,CAASe,OAAQA,EAAQC,OAAQA,IACjC,kBAAC,EAAD,CAASwB,SAAUA,EAAUP,IAAKA,EAAKC,IAAKA,EAAKC,KAAMA,OC1B/D2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0e9fae68.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n\nexport const Wrapper = styled.section`\n  width: 100vw;\n  height: 100vh;\n\n  background-color: hsl(22.1, 40%, 90%);\n`;\n","import styled from \"styled-components\";\n\n// The position must be calculate based on size not precise px size. How to define its current size in syntax?\nexport const Icon = styled.button`\n  position: absolute;\n  top: calc(50% - (18px / 2));\n  right: calc(50% - (36.156px / 2));\n  z-index: 2;\n`;\n","import React from \"react\";\nimport { Icon } from \"./GpsIcon.styled\";\n\n// Next thing is to check out the Geolocation.watchPosition() for the heading option to see if the compass would work.\n// https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition\n\nconst GpsIcon = (props) => {\n  // When run asks for current position and callsback a function and gives it the value as a parameter\n  const testing = () => {\n    navigator.geolocation.getCurrentPosition(testingOutput);\n  };\n\n  // function called in testing which gets data in the parameter from navigator.geolocation.getCurrentPosition\n  //And the data is accessed as parameter.coords.latitude.\n  const testingOutput = (position) => {\n    console.log(\n      `Latitude = ${position.coords.latitude}, Longitude = ${position.coords.longitude}, Facing = ${position.coords.heading}`\n    );\n    props.setLat(\n      position.coords.latitude);\n    props.setLon(\n      position.coords.longitude);\n  };\n\n  // onClick runs a function\n  return (\n    <>\n      <Icon onClick={testing}>GPS</Icon>\n    </>\n  );\n};\n\nexport default GpsIcon;\n","import styled from \"styled-components\";\nimport { Map } from \"react-leaflet\";\n\nexport const MapStyled = styled(Map)`\n  width: 100vw;\n  height: 100vh;\n  z-index: 1;\n`;\n","import React from \"react\";\nimport L from \"leaflet\";\nimport { TileLayer, Marker, Popup } from \"react-leaflet\";\n\nimport { MapStyled } from \"./Ripples.styled\";\n\nconst myIcon = L.icon({\n  iconUrl: \"https://image.flaticon.com/icons/svg/49/49360.svg\",\n  iconSize: [25, 41],\n  iconAnchor: [12.5, 41],\n  popupAnchor: [0, -41],\n});\n\nconst Ripples = (props) => {\n  return (\n    <MapStyled\n      center={[Number(props.lat), Number(props.lon)]}\n      zoom={props.zoom}\n    >\n      {/* MapStyled === Map of react-leaflet */}\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {props.articles !== undefined\n        ? props.articles.map((curr, index) => (\n            <Marker\n              position={[curr.lat, curr.lon]}\n              key={\"coords\" + index}\n              icon={myIcon}\n            >\n              <Popup>\n                <a href={\"https://en.wikipedia.org/wiki/\" + curr.title}>\n                  {curr.title}\n                </a>\n              </Popup>\n            </Marker>\n          ))\n        : null}\n    </MapStyled>\n  );\n};\n\nexport default Ripples;\n","// gscoord=41.118277%7C-8.027207\n// | = %7C\n\nexport const apiTesting = async (location) => {\n  const url = `https://en.wikipedia.org/w/api.php?action=query&format=json&list=geosearch&gscoord=${location}&gsradius=10000&gslimit=20&gsnamespace=0&origin=*`;\n\n  // const articles = [];\n\n  // IIFE to contain the fetch and fill in the array outside of it.\n  // Not sure if I need to pass to articles here, remains to be seen later.\n  // It wasn't working because of this IIFE\n  // (async () => {\n  if (location !== \"%7C\") {\n    const fetchData = await fetch(url);\n    const {\n      query: { geosearch },\n    } = await fetchData.json();\n    console.log(geosearch);\n    return geosearch;\n  }\n  // })();\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { GlobalStyle, Wrapper } from \"./App.styled\";\n\nimport GpsIcon from \"./components/GpsIcon/GpsIcon\";\nimport Ripples from \"./components/Ripples/Ripples\";\nimport { apiTesting } from \"./api\";\n\n// To Do\n// Increase search radius?\n// Improve visual styling of GPS button and its name\n// Or Limit radius to viewable size and fetch when zoom level changes? Does pinching with fingers change zoom?\n\nconst App = () => {\n  const [articles, setArticles] = useState([]);\n  const [lat, setLat] = useState(\"\");\n  const [lon, setLon] = useState(\"\");\n  const [zoom, setZoom] = useState(15);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchedData = await apiTesting(lat + \"%7C\" + lon);\n      setArticles(fetchedData);\n    };\n    fetchData();\n  }, [lat && lon]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <GpsIcon setLat={setLat} setLon={setLon} />\n        <Ripples articles={articles} lat={lat} lon={lon} zoom={zoom} />\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}