{"version":3,"sources":["App.styled.js","components/LeafletMap/LeafletMap.styled.js","components/LeafletMap/LeafletMap.jsx","api/index.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","MapStyled","styled","Map","myIcon","L","icon","iconUrl","iconSize","popupAnchor","LeafletMap","props","emptyArray","undefined","articles","map","curr","push","lat","lon","length","splice","console","log","center","coords","zoomSnap","bounds","latLngBounds","boundsOptions","padding","TileLayer","attribution","url","index","Marker","position","key","Popup","href","title","articlesFetch","location","a","fetch","fetchData","json","geosearch","query","App","useState","setArticles","setCoords","zoom","useEffect","setTimeout","coordsFetch","navigator","geolocation","getCurrentPosition","coordsReceived","latitude","longitude","asyncWrapper","fetchedData","ReactDOM","render","document","getElementById"],"mappings":"0ZAEO,IAAMA,EAAcC,YAAH,K,0JCCjB,IAAMC,EAAYC,YAAOC,IAAPD,CAAH,KCGhBE,EAASC,IAAEC,KAAK,CACpBC,QAAS,oDACTC,SAAU,CAAC,GAAI,IACfC,YAAa,CAAC,GAAI,MAGPC,EAAa,SAACC,GAEzB,IASIC,EAAa,CAAC,CAAC,WAAY,YAc/B,YAZuBC,IAAnBF,EAAMG,UACRH,EAAMG,SAASC,KAAI,SAACC,GAAD,OAAUJ,EAAWK,KAAK,CAACD,EAAKE,IAAKF,EAAKG,SAIrC,KAAtBP,EAAWQ,SACbR,EAAaA,EAAWS,OAAO,IAIjCC,QAAQC,IAAIX,GAGV,kBAACX,EAAD,CACEuB,OAAQb,EAAMc,OAEdC,SAAU,GAEVC,OAAQC,uBAAahB,GAGrBiB,cAAe,CAAEC,QAAS,CAAC,GAAI,MAG/B,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELX,QAAQC,IAAIZ,EAAMG,eACCD,IAAnBF,EAAMG,SACHH,EAAMG,SAASC,KAAI,SAACC,EAAMkB,GAAP,OACjB,kBAACC,EAAA,EAAD,CACEC,SAAU,CAACpB,EAAKE,IAAKF,EAAKG,KAC1BkB,IAAK,SAAWH,EAChB5B,KAAMF,GAEN,kBAACkC,EAAA,EAAD,KACE,uBAAGC,KAAM,iCAAmCvB,EAAKwB,OAC9CxB,EAAKwB,YAKd,OCpEGC,EAAa,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACrBV,EADqB,6FACuES,EADvE,qDAIV,2BAAbA,EAJuB,iCAKDE,MAAMX,GALL,cAKnBY,EALmB,gBAQfA,EAAUC,OARK,uBAOdC,EAPc,EAOvBC,MAASD,UAPc,kBAUlBA,GAVkB,4CAAH,sDCiDXE,EArCH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTpC,EADS,KACCqC,EADD,OAEYD,mBAAS,CAAC,WAAY,YAFlC,mBAETzB,EAFS,KAED2B,EAFC,OAGDF,mBAAS,IAAjBG,EAHS,oBA6BhB,OAvBAC,qBAAU,WACRC,YAAW,YACS,uCAAG,8BAAAZ,EAAA,sDACba,EAAc,WAClBC,UAAUC,YAAYC,mBAAmBC,IAErCA,EAAiB,SAACxB,GACtBgB,EAAU,CAAChB,EAASX,OAAOoC,SAAUzB,EAASX,OAAOqC,aAEvDN,IAPmB,2CAAH,qDASlBO,KACC,OACF,IAEHT,qBAAU,YACO,uCAAG,4BAAAX,EAAA,sEACUF,EAAchB,EAAO,GAAK,MAAQA,EAAO,IADnD,OACVuC,EADU,OAEhBb,EAAYa,GAFI,2CAAH,qDAIfnB,KACC,CAACpB,IAGF,oCACE,kBAAC1B,EAAD,MACA,kBAAC,EAAD,CAAYe,SAAUA,EAAUW,OAAQA,EAAQ4B,KAAMA,MCtC5DY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1e1e5086.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n","import styled from \"styled-components\";\nimport { Map } from \"react-leaflet\";\n\nexport const MapStyled = styled(Map)`\n  width: 100vw;\n  height: 100vh;\n`;\n","import React from \"react\";\nimport L, { latLngBounds } from \"leaflet\";\nimport { TileLayer, Marker, Popup } from \"react-leaflet\";\n\nimport { MapStyled } from \"./LeafletMap.styled\";\n\nconst myIcon = L.icon({\n  iconUrl: \"https://image.flaticon.com/icons/svg/49/49360.svg\",\n  iconSize: [35, 35],\n  popupAnchor: [0, -20],\n});\n\nexport const LeafletMap = (props) => {\n  // Being used for testing purposes only.\n  const testTest = [\n    [38.858494, -9.081971],\n    [38.877043, -9.063705],\n    [38.87573, -9.044171],\n    [38.849149, -9.056733],\n  ];\n\n  // Dummy coords to not output an error when receiving an empty bounds.\n  //  Side note idea - Can javascript be added before bounds to define if bounds will be given or not?\n  let emptyArray = [[29.925994, -39.193599]];\n\n  if (props.articles !== undefined) {\n    props.articles.map((curr) => emptyArray.push([curr.lat, curr.lon]));\n  }\n\n  // Seems to work only in a separate if statment so be it\n  if (emptyArray.length === 11) {\n    emptyArray = emptyArray.splice(1);\n  }\n\n  // Value seems correct now but it focuses only on one of the values.\n  console.log(emptyArray);\n\n  return (\n    <MapStyled\n      center={props.coords}\n      // zoom={props.zoom}\n      zoomSnap={0.1}\n      // It's working with this!\n      bounds={latLngBounds(emptyArray)}\n      // Replace with this to confirm that it is working.\n      // bounds={latLngBounds(testTest)}\n      boundsOptions={{ padding: [40, 40] }}\n    >\n      {/* MapStyled = Map component of react-leaflet */}\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {console.log(props.articles)}\n      {props.articles !== undefined\n        ? props.articles.map((curr, index) => (\n            <Marker\n              position={[curr.lat, curr.lon]}\n              key={\"coords\" + index}\n              icon={myIcon}\n            >\n              <Popup>\n                <a href={\"https://en.wikipedia.org/wiki/\" + curr.title}>\n                  {curr.title}\n                </a>\n              </Popup>\n            </Marker>\n          ))\n        : null}\n    </MapStyled>\n  );\n};\n","export const articlesFetch = async (location) => {\n  const url = `https://en.wikipedia.org/w/api.php?action=query&format=json&list=geosearch&gscoord=${location}&gsradius=10000&gslimit=10&gsnamespace=0&origin=*`;\n\n  // Not to fetch dummy location articles\n  if (location !== 15.925994 + \"%7C\" + -37.193399) {\n    const fetchData = await fetch(url);\n    const {\n      query: { geosearch },\n    } = await fetchData.json();\n    // console.log(geosearch);\n    return geosearch;\n  }\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { GlobalStyle } from \"./App.styled\";\n\nimport { LeafletMap } from \"./components/LeafletMap/LeafletMap\";\nimport { articlesFetch } from \"./api\";\n\n// To Do\n// Adjust zoom to fit all the markers inside the map. Leaflet as a method for it:\n// https://leafletjs.com/examples/zoom-levels/\n// fitBounds(bounds), automatically calculates the zoom to fit a rectangular area on the map\n\nconst App = () => {\n  const [articles, setArticles] = useState([]);\n  const [coords, setCoords] = useState([15.925994, -37.193399]); // Visually Neutral/Sea\n  const [zoom] = useState(15);\n\n  // When run asks for current position and callsback a function giving it the value as a parameter.\n  useEffect(() => {\n    setTimeout(() => {\n      const asyncWrapper = async () => {\n        const coordsFetch = () => {\n          navigator.geolocation.getCurrentPosition(coordsReceived);\n        };\n        const coordsReceived = (position) => {\n          setCoords([position.coords.latitude, position.coords.longitude]);\n        };\n        coordsFetch();\n      };\n      asyncWrapper();\n    }, 1000);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchedData = await articlesFetch(coords[0] + \"%7C\" + coords[1]);\n      setArticles(fetchedData);\n    };\n    fetchData();\n  }, [coords]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <LeafletMap articles={articles} coords={coords} zoom={zoom} />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}