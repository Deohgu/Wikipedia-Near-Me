{"version":3,"sources":["App.styled.js","components/LeafletMap/LeafletMap.styled.js","components/LeafletMap/LeafletMap.jsx","api/index.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","MapStyled","styled","Map","myIcon","L","icon","iconUrl","iconSize","popupAnchor","LeafletMap","props","emptyArray","undefined","articles","map","curr","push","lat","lon","length","splice","console","log","center","coords","zoomSnap","bounds","latLngBounds","boundsOptions","padding","dragging","zoomControl","TileLayer","attribution","url","index","Marker","position","key","Popup","href","title","articlesFetch","location","a","fetch","fetchData","json","geosearch","query","App","useState","setArticles","setCoords","zoom","useEffect","setTimeout","coordsFetch","navigator","geolocation","getCurrentPosition","coordsReceived","latitude","longitude","asyncWrapper","fetchedData","ReactDOM","render","document","getElementById"],"mappings":"0ZAEO,IAAMA,EAAcC,YAAH,K,0JCCjB,IAAMC,EAAYC,YAAOC,IAAPD,CAAH,KCUhBE,EAASC,IAAEC,KAAK,CACpBC,QAAS,oDACTC,SAAU,CAAC,GAAI,IACfC,YAAa,CAAC,GAAI,MAGPC,EAAa,SAACC,GAEzB,IASIC,EAAa,CAAC,CAAC,WAAY,YAc/B,YAZuBC,IAAnBF,EAAMG,UACRH,EAAMG,SAASC,KAAI,SAACC,GAAD,OAAUJ,EAAWK,KAAK,CAACD,EAAKE,IAAKF,EAAKG,SAIrC,KAAtBP,EAAWQ,SACbR,EAAaA,EAAWS,OAAO,IAIjCC,QAAQC,IAAIX,GAGV,kBAACX,EAAD,CACEuB,OAAQb,EAAMc,OAEdC,SAAU,GAEVC,OAAQC,uBAAahB,GAGrBiB,cAAe,CAAEC,QAAS,CAAC,GAAI,KAO/BC,UAAU,EACVC,aAAa,GAGb,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELb,QAAQC,IAAIZ,EAAMG,eACCD,IAAnBF,EAAMG,SACHH,EAAMG,SAASC,KAAI,SAACC,EAAMoB,GAAP,OACjB,kBAACC,EAAA,EAAD,CACEC,SAAU,CAACtB,EAAKE,IAAKF,EAAKG,KAC1BoB,IAAK,SAAWH,EAChB9B,KAAMF,GAEN,kBAACoC,EAAA,EAAD,KACE,uBAAGC,KAAM,iCAAmCzB,EAAK0B,OAC9C1B,EAAK0B,YAKd,OCnFGC,EAAa,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACrBV,EADqB,6FACuES,EADvE,qDAIV,2BAAbA,EAJuB,iCAKDE,MAAMX,GALL,cAKnBY,EALmB,gBAQfA,EAAUC,OARK,uBAOdC,EAPc,EAOvBC,MAASD,UAPc,kBAUlBA,GAVkB,4CAAH,sDCiDXE,EArCH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTtC,EADS,KACCuC,EADD,OAEYD,mBAAS,CAAC,WAAY,YAFlC,mBAET3B,EAFS,KAED6B,EAFC,OAGDF,mBAAS,IAAjBG,EAHS,oBA6BhB,OAvBAC,qBAAU,WACRC,YAAW,YACS,uCAAG,8BAAAZ,EAAA,sDACba,EAAc,WAClBC,UAAUC,YAAYC,mBAAmBC,IAErCA,EAAiB,SAACxB,GACtBgB,EAAU,CAAChB,EAASb,OAAOsC,SAAUzB,EAASb,OAAOuC,aAEvDN,IAPmB,2CAAH,qDASlBO,KACC,OACF,IAEHT,qBAAU,YACO,uCAAG,4BAAAX,EAAA,sEACUF,EAAclB,EAAO,GAAK,MAAQA,EAAO,IADnD,OACVyC,EADU,OAEhBb,EAAYa,GAFI,2CAAH,qDAIfnB,KACC,CAACtB,IAGF,oCACE,kBAAC1B,EAAD,MACA,kBAAC,EAAD,CAAYe,SAAUA,EAAUW,OAAQA,EAAQ8B,KAAMA,MCtC5DY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.27bf2b5b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { Map } from \"react-leaflet\";\r\n\r\nexport const MapStyled = styled(Map)`\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n","import React from \"react\";\r\nimport L, {\r\n  latLngBounds,\r\n  bounds,\r\n  point,\r\n  fitBounds,\r\n  getBounds,\r\n  latLng,\r\n} from \"leaflet\";\r\nimport { TileLayer, Marker, Popup } from \"react-leaflet\";\r\n\r\nimport { MapStyled } from \"./LeafletMap.styled\";\r\n\r\nconst myIcon = L.icon({\r\n  iconUrl: \"https://image.flaticon.com/icons/svg/49/49360.svg\",\r\n  iconSize: [35, 35],\r\n  popupAnchor: [0, -20],\r\n});\r\n\r\nexport const LeafletMap = (props) => {\r\n  // Being used for testing purposes only.\r\n  const testTest = [\r\n    [38.858494, -9.081971],\r\n    [38.877043, -9.063705],\r\n    [38.87573, -9.044171],\r\n    [38.849149, -9.056733],\r\n  ];\r\n\r\n  // Dummy coords to not output an error when receiving an empty bounds.\r\n  //  Side note idea - Can javascript be added before bounds to define if bounds will be given or not?\r\n  let emptyArray = [[29.925994, -39.193599]];\r\n\r\n  if (props.articles !== undefined) {\r\n    props.articles.map((curr) => emptyArray.push([curr.lat, curr.lon]));\r\n  }\r\n\r\n  // Seems to work only in a separate if statment so be it\r\n  if (emptyArray.length === 11) {\r\n    emptyArray = emptyArray.splice(1);\r\n  }\r\n\r\n  // Value seems correct now but it focuses only on one of the values.\r\n  console.log(emptyArray);\r\n\r\n  return (\r\n    <MapStyled\r\n      center={props.coords}\r\n      // zoom={props.zoom}\r\n      zoomSnap={0.1}\r\n      // It's working with this!\r\n      bounds={latLngBounds(emptyArray)}\r\n      // Replace with this to confirm that it is working.\r\n      // bounds={latLngBounds(testTest)}\r\n      boundsOptions={{ padding: [40, 40] }}\r\n      // Testing till it works it testTest.\r\n      // Seems like it it gives off the same error as using the testTest, meaning that point() might be working.\r\n      // maxBounds={latLngBounds(testTest)}\r\n      // maxBounds={testTest}\r\n      // maxBoundsViscosity={1.0}\r\n      // Locking worked.\r\n      dragging={false}\r\n      zoomControl={false}\r\n    >\r\n      {/* MapStyled = Map component of react-leaflet */}\r\n      <TileLayer\r\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {console.log(props.articles)}\r\n      {props.articles !== undefined\r\n        ? props.articles.map((curr, index) => (\r\n            <Marker\r\n              position={[curr.lat, curr.lon]}\r\n              key={\"coords\" + index}\r\n              icon={myIcon}\r\n            >\r\n              <Popup>\r\n                <a href={\"https://en.wikipedia.org/wiki/\" + curr.title}>\r\n                  {curr.title}\r\n                </a>\r\n              </Popup>\r\n            </Marker>\r\n          ))\r\n        : null}\r\n    </MapStyled>\r\n  );\r\n};\r\n","export const articlesFetch = async (location) => {\r\n  const url = `https://en.wikipedia.org/w/api.php?action=query&format=json&list=geosearch&gscoord=${location}&gsradius=10000&gslimit=10&gsnamespace=0&origin=*`;\r\n\r\n  // Not to fetch dummy location articles\r\n  if (location !== 15.925994 + \"%7C\" + -37.193399) {\r\n    const fetchData = await fetch(url);\r\n    const {\r\n      query: { geosearch },\r\n    } = await fetchData.json();\r\n    // console.log(geosearch);\r\n    return geosearch;\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { GlobalStyle } from \"./App.styled\";\r\n\r\nimport { LeafletMap } from \"./components/LeafletMap/LeafletMap\";\r\nimport { articlesFetch } from \"./api\";\r\n\r\n// To Do\r\n// Adjust zoom to fit all the markers inside the map. Leaflet as a method for it:\r\n// https://leafletjs.com/examples/zoom-levels/\r\n// fitBounds(bounds), automatically calculates the zoom to fit a rectangular area on the map\r\n\r\nconst App = () => {\r\n  const [articles, setArticles] = useState([]);\r\n  const [coords, setCoords] = useState([15.925994, -37.193399]); // Visually Neutral/Sea\r\n  const [zoom] = useState(15);\r\n\r\n  // When run asks for current position and callsback a function giving it the value as a parameter.\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      const asyncWrapper = async () => {\r\n        const coordsFetch = () => {\r\n          navigator.geolocation.getCurrentPosition(coordsReceived);\r\n        };\r\n        const coordsReceived = (position) => {\r\n          setCoords([position.coords.latitude, position.coords.longitude]);\r\n        };\r\n        coordsFetch();\r\n      };\r\n      asyncWrapper();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const fetchedData = await articlesFetch(coords[0] + \"%7C\" + coords[1]);\r\n      setArticles(fetchedData);\r\n    };\r\n    fetchData();\r\n  }, [coords]);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <LeafletMap articles={articles} coords={coords} zoom={zoom} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}